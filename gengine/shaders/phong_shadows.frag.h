// header file generated by lasagnaphil
#ifndef  TXT_HEADER_phong_shadows_frag_shader
#define  TXT_HEADER_phong_shadows_frag_shader


const char phong_shadows_frag_shader [] =
"#version 330 core\n"
"\n"
"struct Material {\n"
"    vec4 ambient;\n"
"    vec4 diffuse;\n"
"    vec4 specular;\n"
"    float shininess;\n"
"    sampler2D texDiffuse;\n"
"    sampler2D texSpecular;\n"
"    bool useTexDiffuse;\n"
"    bool useTexSpecular;\n"
"};\n"
"\n"
"struct DirLight {\n"
"    bool enabled;\n"
"\n"
"    vec3 direction;\n"
"\n"
"    vec4 ambient;\n"
"    vec4 diffuse;\n"
"    vec4 specular;\n"
"\n"
"    float intensity;\n"
"};\n"
"\n"
"struct PointLight {\n"
"    bool enabled;\n"
"\n"
"    vec3 position;\n"
"\n"
"    float constant;\n"
"    float linear;\n"
"    float quadratic;\n"
"\n"
"    vec4 ambient;\n"
"    vec4 diffuse;\n"
"    vec4 specular;\n"
"\n"
"    float intensity;\n"
"};\n"
"\n"
"struct SpotLight {\n"
"    bool enabled;\n"
"\n"
"    vec3 position;\n"
"    vec3 direction;\n"
"    float cutOff;\n"
"    float outerCutOff;\n"
"\n"
"    vec4 ambient;\n"
"    vec4 diffuse;\n"
"    vec4 specular;\n"
"\n"
"    float constant;\n"
"    float linear;\n"
"    float quadratic;\n"
"\n"
"    float intensity;\n"
"};\n"
"\n"
"in VS_OUT {\n"
"    vec3 FragPos;\n"
"    vec3 Normal;\n"
"    vec2 TexCoords;\n"
"    vec4 FragPos_DirLightSpace;\n"
"} fs_in;\n"
"\n"
"out vec4 fragColor;\n"
"\n"
"uniform vec3 viewPos;\n"
"\n"
"uniform Material material;\n"
"\n"
"uniform DirLight dirLight;\n"
"\n"
"#define NR_POINT_LIGHTS 16\n"
"uniform PointLight pointLights[NR_POINT_LIGHTS];\n"
"\n"
"#define NR_SPOT_LIGHTS 8\n"
"uniform SpotLight spotLights[NR_SPOT_LIGHTS];\n"
"\n"
"uniform int numPointLights;\n"
"uniform int numSpotLights;\n"
"\n"
"uniform sampler2D shadowMap;\n"
"\n"
"float shadowCalculation(vec4 fragPosLightSpace) {\n"
"    float bias = 0.0005;\n"
"    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;\n"
"    projCoords = projCoords * 0.5 + 0.5;\n"
"    float currentDepth = projCoords.z;\n"
"    float shadow = 0.0;\n"
"    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);\n"
"    for (int x = -1; x <= 1; ++x) {\n"
"        for (int y = -1; y <= 1; ++y) {\n"
"            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;\n"
"            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;\n"
"        }\n"
"    }\n"
"    shadow /= 9.0;\n"
"    return shadow;\n"
"}\n"
"\n"
"vec4 calcDirLight(DirLight light, vec3 normal, vec3 viewDir, vec4 matDiffuse, vec4 matSpecular) {\n"
"    vec3 lightDir = normalize(-light.direction);\n"
"\n"
"    float diff = max(dot(normal, lightDir), 0.0);\n"
"\n"
"    // vec3 reflectDir = reflect(-lightDir, normal);\n"
"    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
"    vec3 halfwayDir = normalize(lightDir + viewDir);\n"
"    float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);\n"
"\n"
"    vec4 ambient = light.ambient * matDiffuse;\n"
"    vec4 diffuse = light.intensity * light.diffuse * diff * matDiffuse;\n"
"    vec4 specular = light.intensity * light.specular * spec * matSpecular;\n"
"    float shadow = shadowCalculation(fs_in.FragPos_DirLightSpace);\n"
"\n"
"    return ambient + (1.0 - shadow) * (diffuse + specular);\n"
"}\n"
"\n"
"vec4 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec4 matDiffuse, vec4 matSpecular) {\n"
"    vec3 lightDir = normalize(light.position - fragPos);\n"
"\n"
"    float diff = max(dot(normal, lightDir), 0.0);\n"
"\n"
"    // vec3 reflectDir = reflect(-lightDir, normal);\n"
"    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
"    vec3 halfwayDir = normalize(lightDir + viewDir);\n"
"    float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);\n"
"\n"
"    float distance = length(light.position - fragPos);\n"
"    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n"
"\n"
"    vec4 ambient = light.ambient * matDiffuse;\n"
"    vec4 diffuse = light.intensity * light.diffuse * diff * matDiffuse;\n"
"    vec4 specular = light.intensity * light.specular * spec * matSpecular;\n"
"    float shadow = shadowCalculation(fs_in.FragPos_DirLightSpace);\n"
"\n"
"    return attenuation * (ambient + (1.0 - shadow) * (diffuse + specular));\n"
"}\n"
"\n"
"vec4 calcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir, vec4 matDiffuse, vec4 matSpecular) {\n"
"    vec3 lightDir = normalize(light.position - fragPos);\n"
"\n"
"    float theta = dot(lightDir, normalize(-light.direction));\n"
"    float epsilon = light.cutOff - light.outerCutOff;\n"
"    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);\n"
"\n"
"    float diff = max(dot(normal, lightDir), 0.0);\n"
"\n"
"    // vec3 reflectDir = reflect(-lightDir, normal);\n"
"    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"
"    vec3 halfwayDir = normalize(lightDir + viewDir);\n"
"    float spec = pow(max(dot(viewDir, halfwayDir), 0.0), material.shininess);\n"
"\n"
"    float distance = length(light.position - fragPos);\n"
"    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n"
"\n"
"    vec4 ambient = light.ambient * matDiffuse;\n"
"    vec4 diffuse = light.intensity * light.diffuse * diff * matDiffuse;\n"
"    vec4 specular = light.intensity * light.specular * spec * matSpecular;\n"
"    float shadow = shadowCalculation(fs_in.FragPos_DirLightSpace);\n"
"\n"
"    return attenuation * (ambient + (1.0 - shadow) * intensity * (diffuse + specular));\n"
"}\n"
"\n"
"void main() {\n"
"    vec3 norm = normalize(fs_in.Normal);\n"
"    vec3 viewDir = normalize(viewPos - fs_in.FragPos);\n"
"\n"
"    vec4 matDiffuse, matSpecular;\n"
"    if (material.useTexDiffuse)\n"
"        matDiffuse = texture(material.texDiffuse, fs_in.TexCoords);\n"
"    else\n"
"        matDiffuse = material.diffuse;\n"
"\n"
"    if (material.useTexSpecular)\n"
"        matSpecular = texture(material.texSpecular, fs_in.TexCoords);\n"
"    else\n"
"        matSpecular = material.specular;\n"
"\n"
"    vec4 result = vec4(0.0);\n"
"    if (dirLight.enabled) result = calcDirLight(dirLight, norm, viewDir, matDiffuse, matSpecular);\n"
"\n"
"    for (int i = 0; i < numPointLights; ++i) {\n"
"        if (pointLights[i].enabled) {\n"
"            result += calcPointLight(pointLights[i], norm, fs_in.FragPos, viewDir, matDiffuse, matSpecular);\n"
"        }\n"
"    }\n"
"\n"
"    for (int i = 0; i < numSpotLights; ++i) {\n"
"        if (spotLights[i].enabled) {\n"
"            result += calcSpotLight(spotLights[i], norm, fs_in.FragPos, viewDir, matDiffuse, matSpecular);\n"
"        }\n"
"    }\n"
"\n"
"    fragColor = result;\n"
"}\n"
;


#endif  // #ifdef TXT_HEADER_phong_shadows_frag_shader
